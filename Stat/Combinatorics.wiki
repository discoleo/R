
= The Daily Combinatorics Problem =
; Before Sleep ... at least 3-4 hours before sleep!

: Leonard Mada
: (the one and only)
: draft v.0.1b

== Introduction ==

A nice collection of combinatorics problems. Best attacked before sleep, ... at least 3-4 hours before sleep.

; Sections:
* Problem 1: Counting Intersections;
* Problem 2: Permutations on Graphs => Hypergraphs;


== Problem 1: Counting Intersections ==

Problem:
* let n be a positive integer.
* 2 sequences are created: a sequence 1 to n (1:n) and a random permutation of this sequence;
* these 2 sequences are positioned on 2 parallel line segments and the corresponding numbers are matched: each number x[i] in the first sequence is matched to the corresponding number (with the same value) in the 2nd sequence;
* the intersections of the matching lines are counted;

; Cost:
Let m = infimum(number of crossings generated by the matching mechanism);
: What is the average value of m?

; Cost variant:
Let m = infimum(x[i] * number of crossings generated by the matching mechanism);
* m = a weighted cost including the value of the number as a weight;


=== Topology ===

; Variants with various topologies

==== T.1. Line Segments ====
The n numbers are positioned on 2 parallel line segments.

==== T.2. Cylinder ====
T.2a: The 2 sequences are put on the delimiting circles of a cylinder and the matching is done only on the curved outer surface of the cylinder.

Variants:
T.2b: the numbers are positioned on 2 concentric circles away from the extremes of the cylinder, which allows matches to also traverse the remaining curved surface;
T.2c: as in [T.2a], but the matchings can cross both on the external, as well as internal surface of the cylinder. The 2 surfaces are considered distinct.


==== T.3. Sphere ====
T.3a: the 2 sequences of numbers are positioned on 2 concentric circles running over the surface of the sphere.

T.3b: the 2 sequences are positioned on 2 orthogonal equatorial circles. The numbers [0] and [0] are matched on one of the intersections, while the remaining numbers are distributed uniformely on the length of the 2 circles.

T.3c: TODO more variants;


==== T.4. Moebius Strip ====
: (one of my favourites)
The 2 sequences are concatenated and are positioned on the edge of a Moebius strip. Matches can run over both sides of the surface and are considered to cross only when they intersect on the same side of the surface.


==== T.5. Square ====
The original sequence and 3 random permutations of this sequence are positioned on the 4 sides of a square. Variants may include different numbers of random sequences (1..4 random sequences + 3..0 non-random).

T.5a: the numbers are matched only on opposite sides.
T.5b: number can be matched on any side, but each number is matched only once.
T.5c: each number is connected to all its matching partners.

==== T.6. 2-n Polygon ====
Similar to [T.5.]: a total of 2*n sequences are positioned on the edges of a 2-n convex polygon. Numbers are matched inside the polygon. Various variants are possible as described in section [T.5].


=== Multiplicity ===

M.1: only 1 copy of the 1:n sequence and 1 copy of the random permutation are used.

M.2: Multiplicity d;
There are various variants to arange the d copies of the sequences:
M.2a: d copies of the 1:n sequence are generated. The d copies are concatenated one after each other.
M.2b: d copies of the 1:n sequence are generated. Each number is repeated d times.
M.2c: d copies of the 1:n sequence are generated. This multiple sequence (with all numbers) is permuted.

TODO: more variants;

=== Solutions ===

TODO: ...;

; Example: T1 Topology
* 1   2   3   4   5   6   7   8   9   10
* 1   7   5   9   2   4  10   3   8    6
; Intersections:
* 0 + 5 + 3 + 5 +(0)+(0)+ 3 +(0)+(0)+ (0) = 16;

Intersections of the 2nd line are not counted again: the (0)s in the example.


== Problem 2: Graph Permutations ==

; k-Permutation:
* a permutation in which k elements are permuted: e.g. {1,2,3} => {2,3,1} is a 3 permutation;
* max-k permutation: up to k elements are permuted (but can be less);
* these permutations make sense on graphs only when k >= 3;

=== Graph Permutations ===

; Simple k-Permutations:
* a continuous string of (k-1) edges is subject to a k-permutation;
* e.g. {2,3,1}-permutation of edges {(1,2), (2,3)} gives: {(2,3), (3,1)} and the initial edge (1,2) is deleted, if there was NO (3,1) edge;

; Vertex k-Permutations:
* a specific vertex and (k-1) neighbors are subject to a k-permutation;
* only the edges between the permuted vertices are permuted according to the permutation;
* the remaining edges (between one permuted vertex and the non-permuted vertices) remain in place;
* TODO: image with a permutation;

=== Hypergraph ===

These permutations create a hypergraph. The nodes of the hypergraph are the permuted graphs.

TODO: describe problems on the hypergraph.
